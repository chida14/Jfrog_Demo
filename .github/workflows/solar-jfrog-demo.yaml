name: "Solar-JFrog"

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      # - 'feature/*' #
  
permissions:
  contents: read
  security-events: write
  id-token: write

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  build_test:
     runs-on: ubuntu-latest
       
     steps:
       - name: Checkout
         uses: actions/checkout@v3
         
       - name: Setup JFrog CLI
         uses: jfrog/setup-jfrog-cli@v4
         env:  
           JF_URL: ${{ vars.JF_URL }}
           JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
           
       - name: Setup Node npm
         uses: actions/setup-node@v3
         with:
            node-version: 20
           
       - name: Set CLI Config
         run: jf npm-config --global=true --repo-resolve=solar-npm --repo-deploy=solar-npm
           
       - name: Install Deps
         run: jf npm install
           
       - name: Run tests
         run: npm test
      
       - name: Check Code Coverage
         continue-on-error: true
         run: npm run coverage

       - name: Publish
         run: jf npm publish

       - name: Archive Test Result
         uses: actions/upload-artifact@v4
         with: 
           name: Mocha-Test-Result
           path: test-results.xml
       
       - name: Archive Test Result
         uses: actions/upload-artifact@v4
         with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 1
        
       - name: Publish Build info With JFrog CLI
         run: |
          # Collect environment variables for the build
          jf rt build-collect-env 
          # Collect VCS details from git and add them to the build
          jf rt build-add-git 
          # Publish build info 
          jf rt build-publish 
          # Scan build
          jf build-scan 

  docker-build-and-tag:
      name: Containerization
      runs-on: ubuntu-latest
      needs: [build_test]
      env:
        BUILD_NAME: solar-jfrog
        BUILD_NUMBER: ${{ github.run_number }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Setup JFrog CLI
          uses: jfrog/setup-jfrog-cli@v4
          env:
            JF_URL: ${{ vars.JF_URL }}
            JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

        - name: Build Tag and push Docker Image
          continue-on-error: true
          env:
            IMAGE_NAME: chida1.jfrog.io/solar-docker/${{ env.BUILD_NAME }}:${{ github.run_number }}
          run: |
           jf docker build -t $IMAGE_NAME .
           jf docker push $IMAGE_NAME
 
        - name: Publish Build info With JFrog CLI
          env:
            IMAGE_NAME: chida1.jfrog.io/solar-docker/${{ env.BUILD_NAME }}:${{ github.run_number }}
          run: |
            # Export the build name and build number
            # Collect environment variables for the build
            jf rt build-collect-env
            # Collect VCS details from git and add them to the build
            jf rt build-add-git
            # Publish build info
            jf rt build-publish
            # Scan build
            #jf build-scan 
            #Scan docker image
            jf docker scan ${{ env.IMAGE_NAME }} --build-name ${{ env.BUILD_NAME }} --build-number ${{ github.run_number }} 

  dev-deploy:
      env:
        BUILD_NAME: solar-jfrog
        BUILD_NUMBER: ${{ github.run_number }}
      needs: docker-build-and-tag
      runs-on: ubuntu-latest
      steps:
        - name: checkout Repo
          uses: actions/checkout@v3
        
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v4
        
        - name: Set Kubeconfig File
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
            #context: <context name> # current-context from kubeconfig is used as default

        - name: Fetch K8s Cluster Details
          run: |
            kubectl version
            echo -------------------------------------------------------
            kubectl get nodes 

        - name: Save Ingress Nginx Controller IP as a GITHUB Environment Variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get service ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: chida1.jfrog.io/solar-docker/${{ env.BUILD_NAME }}:${{ github.run_number }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
        
        - name: Check Files
          run: |
            cat kubernetes/development/*.yaml

        - name: Create Docker Registry secret for Jfrog Artifactory
          continue-on-error: true
          run: |
            kubectl create secret docker-registry jfrog-regcred \
            --docker-server=chida1.jfrog.io \
            --docker-username=${{ vars.JF_USER }} \
            --docker-password=${{ secrets.JF_DOCKER_ACCESS_TOKEN }} \
            -n ${{ vars.NAMESPACE }}

        - name: Create MongoDB Secret
          continue-on-error: true
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ vars.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -
            
        - name: Deploy to Dev Env
          run: |
            kubectl apply -f kubernetes/development/